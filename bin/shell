#!/bin/bash

die () {
    echo >&2 "$@"
    exit 1
}


# determine location of this script
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"


# get site directory
[ -n "$1" ] || die "Usage: emergence-kernel site-handle"

siteHandle=$1
siteDir="/emergence/sites/$siteHandle"

[ -d "$siteDir" ] || die "Site '$siteHandle' not found at '$siteDir'"


# generate auto_prepend_file at temp path
autoPrependScript=$(mktemp);

echo "<?php" > $autoPrependScript
echo "require('`dirname $DIR`/php-bootstrap/bootstrap.inc.php');" >> $autoPrependScript
echo "Site::initialize('$siteDir');" >> $autoPrependScript


# give www-data access to script
chgrp www-data $autoPrependScript
chmod g+r $autoPrependScript


# set TERM=dumb if it's not set
if [ -n "$TERM" ] && [ "$TERM" = unknown ] ; then
  TERM=dumb
fi


# determine code source
if [ "$2" == "--stdin"  ]; then
    INPUT_ARGS=""
elif [ -n "$2" ]; then
    INPUT_ARGS="-f $2"
else
    INPUT_ARGS="-a"
fi


# execute interactive shell
TERM=$TERM sudo -E -u www-data -g www-data php -d auto_prepend_file=$autoPrependScript -d apc.enable_cli=on $INPUT_ARGS


# clean up
rm $autoPrependScript;
