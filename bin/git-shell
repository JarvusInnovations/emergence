#!/bin/bash

die () {
    echo >&2 "$@"
    exit 1
}


# determine location of this script
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"


# configuration
SITE_HANDLE=$1
SITE_LAYER=$2

UNDERSCORE=$DIR/../node_modules/.bin/underscore

BLACK="\033[01;30m"
MAGENTA="\033[1;31m"
ORANGE="\033[1;33m"
GREEN="\033[1;32m"
PURPLE="\033[1;35m"
WHITE="\033[1;37m"
BOLD=""
RESET="\033[m"

PROMPT_SYMBOL="⚡ "
PROMPT_SITE="\[${BOLD}${MAGENTA}\]\$SITE_HOSTNAME"
PROMPT_LAYER="\[${BOLD}${ORANGE}\]$SITE_LAYER"
PROMPT_BRANCH="\[$PURPLE\]\$(git symbolic-ref --short -q HEAD 2> /dev/null)\$([[ -n \$(git status --porcelain 2> /dev/null) ]] && echo \"*\")"
PROMPT_GIT="\$([[ \$PWD = \$HOME || \$PWD = \$HOME/* ]] && echo \"$PROMPT_LAYER#$PROMPT_BRANCH\[$WHITE\] on \")"

PS1="$PROMPT_GIT$PROMPT_SITE\[$WHITE\]:\[$GREEN\]\w\[$WHITE\]\n$PROMPT_SYMBOL\[$RESET\]" \
PS2="\[$ORANGE\]→ \[$RESET\]" \


# check environment
test -x "$UNDERSCORE" || die "unable to execute $UNDERSCORE"
test -n "$SITE_HANDLE" -a -n "$SITE_LAYER"|| die "usage: emergence-git-shell site_handle layer_id"


# get site directory
SITE_DIR="/hab/svc/emergence-kernel/data/sites/$SITE_HANDLE"
test -d "$SITE_DIR" || die "site $SITE_HANDLE not found at $SITE_DIR"


# get site primary hostname
SITE_HOSTNAME=`cat $SITE_DIR/site.json | $UNDERSCORE extract primary_hostname --outfmt text`


# get git layer
GIT_DIR="$SITE_DIR/site-data/git/$SITE_LAYER"
test -d "$GIT_DIR" || die "layer $SITE_LAYER not found at $GIT_DIR"

GIT_SSH="$SITE_DIR/site-data/git/$SITE_LAYER.git.sh"


# check git user
GIT_NAME=`git config user.name`
GIT_EMAIL=`git config user.email`
GIT_USER_DIRTY=""

if [ -z "$GIT_NAME" ]; then
    read -p "Your full name for git commits: " GIT_NAME
    GIT_USER_DIRTY=1
fi

if [ -z "$GIT_EMAIL" ]; then
    read -p "Your email address for git commits: " GIT_EMAIL
    GIT_USER_DIRTY=1
fi

if [ -n "$GIT_USER_DIRTY" ]; then
    read -p "Save git user $GIT_NAME <$GIT_EMAIL> (y/n)? " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]] || die

    git config --global user.name "$GIT_NAME"
    git config --global user.email "$GIT_EMAIL"
fi


# setup environment
export PS1
export PS2
export SITE_HOSTNAME
export SITE_LAYER
export GIT_SSH

export HISTFILE="$GIT_DIR.bash_history"
export GIT_AUTHOR_NAME="$GIT_NAME"
export GIT_AUTHOR_EMAIL="$GIT_EMAIL"
export GIT_COMMITTER_NAME="$GIT_NAME"
export GIT_COMMITTER_EMAIL="$GIT_EMAIL"


# execute subshell
echo "Opening git shell at $GIT_DIR"
cd $GIT_DIR

git status

echo "Committing as $GIT_NAME <$GIT_EMAIL>"

if [ "$(whoami)" == "hab" ]; then
    HOME="$GIT_DIR" exec bash --norc
else
    exec su hab -c "HOME='$GIT_DIR' bash --norc"
fi